(function(exports){
exports.version = '1.0.0';
exports.lib = {
  "attachments_assert": "module.exports = function() {\n\n  var inherits = require('sofa/lib/inherits');\n  var Base = require('sofa/lib/base_assert');\n\n  function Assert(key, parent) {\n    Base.apply(this, arguments);\n  }\n\n  inherits(Assert, Base);\n\n  return Assert;\n}();",
  "attachments": "module.exports = function() {\n\n  var inherits = require('sofa/lib/inherits');\n  var Base = require('sofa/lib/base');\n  var AttachmentsAssert = require('sofa/lib/attachments_assert');\n\n  function Attachments(newDoc, oldDoc, userCtx, secObj) {\n    Base.apply(this, arguments);\n    this.object = this.doc._attachments || {};\n    this.assert = new AttachmentsAssert('_attachments', this);\n  }\n\n  inherits(Attachments, Base);\n\n  return Attachments;\n}();",
  "base_assert": "module.exports = function() {\n\n  function Assert(key, parent) {\n    this.key = key;\n    this.parent = parent;\n  }\n\n  Assert.prototype._format = function(error) {\n    var parent = this.parent.key;\n    var key = this.key;\n    if(key) {\n      return key + ' ' + error\n    }\n    return error;\n  }\n\n  Assert.prototype.fail = function(error) {\n    this.parent.forbidden(this._format(error));\n  }\n\n  Assert.prototype.succeed = function(error) {\n    this.parent.log('ok: ' + this._format(error));\n  }\n\n  Assert.prototype.ok = function(condition, error) {\n    if(!condition) {\n      this.fail(error);\n    } else {\n      this.succeed(error);\n    }\n  }\n\n  Assert.prototype.authenticated = function() {\n    this.ok(this.parent.authenticated(), 'must be logged in');\n  }\n\n  Assert.prototype.admin = function() {\n    this.ok(this.parent.admin(), 'must be admin');\n  }\n\n  Assert.prototype.member = function() {\n    this.ok(this.parent.member(), 'must be admin or member');\n  }\n\n  Assert.prototype.role = function(role) {\n    this.ok(this.parent.role(role), 'must be admin or have \"' + role + '\" role');\n  }\n\n  return Assert;\n}();",
  "base": "module.exports = function() {\n\n  function Base(newDoc, oldDoc, userCtx, secObj) {\n    this.newDoc = newDoc;\n    this.oldDoc = oldDoc;\n    this.userCtx = userCtx;\n    this.secObj = secObj;\n    this.deleted = newDoc._deleted === true;\n    this.saved = !this.deleted;\n    if(this.deleted) {\n      if(this.oldDoc) {\n        this.doc = this.oldDoc;\n      } else {\n        // Might also happen while replicating databases. Save doc in db_a, delete that doc, replicate to db_b.\n        // db_b receives _deleted:true doc without local oldDoc. As on db_b there is no history of this document,\n        // we can safely ignore it.\n        this.forbidden(\"Do not insert deleted documents\");\n      }\n    } else {\n      this.doc = this.newDoc;\n    }\n    this.type = this.doc.type;\n    this.object = this.doc;\n  }\n\n  Base.prototype.log = function() {\n    var value = Array.prototype.slice.call(arguments);\n    if(value.length == 1) {\n      value = value[0];\n    }\n    log(toJSON(value));\n  };\n\n  Base.prototype.forbidden = function(message) {\n    message = message || \"forbidden\";\n    this.log(\"fail: \" + message);\n    throw({forbidden: message});\n  };\n\n  Base.prototype._type = function(value) {\n    return Object.prototype.toString.call(value);\n  }\n\n  Base.prototype._is = function(value, type) {\n    return this._type(value) === '[object ' + type + ']';\n  }\n\n  Base.prototype._role = function(name) {\n    return this.userCtx.roles.indexOf(name) !== -1;\n  }\n\n  Base.prototype.role = function(name) {\n    if(this.admin()) {\n      return true;\n    }\n    return this._role(name);\n  }\n\n  Base.prototype.authenticated = function() {\n    return !!this.userCtx.name;\n  }\n\n  Base.prototype._sec = function(sec) {\n    var user = this.userCtx;\n\n    sec = sec || {};\n    sec.names = sec.names || [];\n    sec.roles = sec.roles || [];\n\n    if(sec.names.indexOf(user.name) !== -1) {\n      return true;\n    }\n\n    for(var i = 0; i < user.roles.length; i++) {\n      var role = user.roles[i];\n      if(sec.roles.indexOf(role) !== -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Base.prototype.admin = function() {\n    if(!this.authenticated()) {\n      return false;\n    }\n\n    if(this._role('_admin')) {\n      return true;\n    }\n\n    return this._sec(this.secObj.admins);\n  }\n\n  Base.prototype.member = function() {\n    if(!this.authenticated()) {\n      return false;\n    }\n\n    if(this.admin()) {\n      return true;\n    }\n\n    return this._sec(this.secObj.members);\n  }\n\n  Base.prototype._prop = function(name, value, cb) {\n    var parent = this.assert.key;\n    if(parent) {\n      name = parent + '.' + name;\n    }\n    var Property = require('sofa/lib/property');\n    var property = new Property(name, value, this.newDoc, this.oldDoc, this.userCtx, this.secObj);\n    if(cb) {\n      cb.call(property, property);\n    }\n    return property;\n  }\n\n  Base.prototype.prop = function(name, cb) {\n    var value = this.object[name];\n    return this._prop(name, value, cb);;\n  }\n\n  Base.prototype.keys = function(cb) {\n    var value = Object.keys(this.object);\n    return this._prop('_keys', value, cb);\n  }\n\n  return Base;\n}();",
  "document_assert": "module.exports = function() {\n\n  var inherits = require('sofa/lib/inherits');\n  var Base = require('sofa/lib/base_assert');\n\n  function Assert(key, parent) {\n    Base.apply(this, arguments);\n  }\n\n  inherits(Assert, Base);\n\n  return Assert;\n}();",
  "document": "module.exports = function() {\n\n  var inherits = require('sofa/lib/inherits');\n  var Base = require('sofa/lib/base');\n  var DocumentAssert = require('sofa/lib/document_assert');\n  var Attachments = require('sofa/lib/attachments');\n\n  function Document(newDoc, oldDoc, userCtx, secObj) {\n    Base.apply(this, arguments);\n    this.assert = new DocumentAssert(null, this);\n    this.attachments = new Attachments(newDoc, oldDoc, userCtx, secObj);\n  }\n\n  inherits(Document, Base);\n\n  return Document;\n}();",
  "inherits": "module.exports = function(Subclass, ParentClass) {\n  Subclass.prototype = Object.create(ParentClass.prototype);\n  Subclass.prototype.constructor = Subclass;\n}",
  "property_assert": "module.exports = function() {\n\n  var inherits = require('sofa/lib/inherits');\n  var DocumentAssert = require('sofa/lib/document_assert');\n\n  function Assert() {\n    DocumentAssert.apply(this, arguments);\n  }\n\n  inherits(Assert, DocumentAssert);\n\n  Assert.prototype.has = function() {\n    this.ok(this.parent.has(), 'must exist');\n  }\n\n  Assert.prototype.string = function() {\n    this.ok(this.parent.string(), 'must be string');\n  }\n\n  Assert.prototype.number = function() {\n    this.ok(this.parent.number(), 'must be number');\n  }\n\n  Assert.prototype.array = function() {\n    this.ok(this.parent.array(), 'must be array');\n  }\n\n  Assert.prototype.unchanged = function() {\n    this.ok(this.parent.unchanged(), 'cannot be changed');\n  }\n\n  Assert.prototype.date = function() {\n    this.ok(this.parent.date(), 'must be date');\n  }\n\n  Assert.prototype.prefix = function(prefix) {\n    this.string();\n    this.ok(this.parent.prefix(prefix), 'must have \"' + prefix + '\" prefix');\n  }\n\n  Assert.prototype.equal = function(value, strict, error) {\n    if(this.parent._is(strict, 'String')) {\n      error = strict;\n      strict = false;\n    }\n    this.ok(this.parent.equal(value, strict), error || ('must equal to \"' + value + '\"'));\n  }\n\n  Assert.prototype.notBlank = function() {\n    this.has();\n    this.string();\n    this.ok(this.parent.notBlank(), 'must not be blank');\n  }\n\n  Assert.prototype.identifier = function() {\n    this.notBlank();\n    this.ok(this.parent.identifier(), 'must be lowercase and not contain whitespaces');\n  }\n\n  Assert.prototype.username = function(prefix, error) {\n    this.authenticated();\n    this.ok(this.parent.username(prefix), error || 'must equal your username');\n  }\n\n  Assert.prototype.choices = function(choices, error) {\n    this.ok(this.parent.choices(choices), error || 'must be one of \"' + choices.join('\", \"') + '\"');\n  }\n\n  return Assert;\n}();",
  "property": "module.exports = function() {\n\n  var inherits = require('sofa/lib/inherits');\n  var Document = require('sofa/lib/document');\n  var PropertyAssert = require('sofa/lib/property_assert');\n\n  function Property(key, value, newDoc, oldDoc, userCtx, secObj) {\n    Document.call(this, newDoc, oldDoc, userCtx, secObj);\n    this.key = key;\n    this.value = value;\n    this.assert = new PropertyAssert(key, this);\n  }\n\n  inherits(Property, Document);\n\n  Property.prototype.has = function() {\n    return this.object.hasOwnProperty(this.key);\n  }\n\n  Property.prototype.is = function(type) {\n    return this._is(this.value, type);\n  }\n\n  Property.prototype.string = function() {\n    return this.is('String');\n  }\n\n  Property.prototype.number = function() {\n    return this.is('Number');\n  }\n\n  Property.prototype.array = function() {\n    return this.is('Array');\n  }\n\n  Property.prototype.date = function() {\n    if(!this.string()) {\n      return false;\n    }\n    var value = this.value;\n    var date = new Date(value);\n    if(!date) {\n      return false;\n    }\n    return date.toJSON() === value;\n  }\n\n  Property.prototype.prefix = function(prefix) {\n    if(!this.string()) {\n      return false;\n    }\n    return this.value.indexOf(prefix) === 0;\n  }\n\n\n  Property.prototype._equalArray = function(a, b, strict) {\n    if(!this._is(b, 'Array')) {\n      return false;\n    }\n\n    if(a.length !== b.length) {\n      return false;\n    }\n\n    for(var i = 0; i < b.length; i++) {\n      if(strict) {\n        // order important, can _equalObject be added\n        return this._equal(a[i], b[i], strict);\n      } else {\n        // order not important\n        var bv = b[i];\n        if(a.indexOf(bv) === -1) {\n          return false;\n        }        \n      }\n    }\n\n    return true;\n  }\n\n  Property.prototype._equal = function(a, b, strict) {\n    if(a !== b) {\n      if(this._is(a, 'Array')) {\n        return this._equalArray(a, b, strict);\n      }\n      return false;\n    }\n    return true;\n  }\n\n  Property.prototype.equal = function(value, strict) {\n    return this._equal(this.value, value, strict);\n  }\n\n  Property.prototype.unchanged = function() {\n    var old = this.oldDoc;\n    var key = this.key;\n    if(!old || !old.hasOwnProperty(key)) {\n      return true;\n    }\n    return this.value === old[key];\n  }\n\n  Property.prototype.notBlank = function() {\n    if(!this.string()) {\n      return false;\n    }\n    return this.value.trim().length > 0;\n  }\n\n  Property.prototype.identifier = function() {\n    if(!this.notBlank()) {\n      return false;\n    }\n    var value = this.value;\n    if(value.indexOf(' ') !== -1) {\n      return false;\n    }\n    if(value.toLowerCase() !== value) {\n      return false;\n    }\n    return true;\n  }\n\n  Property.prototype.username = function(prefix) {\n    if(!this.authenticated()) {\n      return false;\n    }\n    if(!this.notBlank()) {\n      return false;\n    }\n\n    var value = this.value;\n    if(prefix) {\n      value = prefix + value;\n    }\n    return value === this.userCtx.name;\n  }\n\n  Property.prototype.choices = function(choices) {\n    return choices.indexOf(this.value) !== -1;\n  };\n\n  return Property;\n}();"
};
exports.validator = "module.exports = function(newDoc, oldDoc, userCtx, secObj) {\n  \n  var Document = require('sofa/lib/document');\n  var inherits = require('sofa/lib/inherits');\n\n  function Root() {\n    Document.apply(this, arguments);\n  }\n\n  inherits(Root, Document);\n\n  Root.prototype.forType = function(type, cb) {\n    if(this.type === type) {\n      this.log('Validate ' + type + ' \\'' + this.doc._id + '\\' ' + (this.deleted ? '(delete)' : '(save)'));\n      if(cb) {\n        cb.call(this, this);\n      }\n      return this;\n    }\n  }\n\n  Root.prototype.types = function(types) {\n    this.prop('type', function() {\n      this.assert.notBlank();\n      this.assert.choices(types);\n    });\n  }\n\n  return new Root(newDoc, oldDoc, userCtx, secObj);\n}";
})(typeof exports === 'undefined' ? this['couchdb_doc_validator'] = {}: exports);